---
description: 
globs: 
alwaysApply: false
---
# Build and Deployment Guide

Instructions for building, running, and deploying the Aliyun DevOps Pipelines TUI application.

## Prerequisites

### Go Environment
- Go 1.22.2 or later (as specified in [go.mod](mdc:go.mod))
- Git for version control
- Terminal with Unicode support for best TUI experience

### Aliyun Cloud Setup
- Aliyun Cloud account with DevOps services enabled
- Access key and secret with appropriate permissions
- DevOps organization ID

## Building the Application

### Local Development Build
```bash
# Build for current platform
go build -o flowt ./cmd/aliyun-pipelines-tui

# Build with debug information
go build -gcflags="all=-N -l" -o flowt-debug ./cmd/aliyun-pipelines-tui
```

### Cross-Platform Builds
```bash
# Build for Linux
GOOS=linux GOARCH=amd64 go build -o flowt-linux ./cmd/aliyun-pipelines-tui

# Build for Windows
GOOS=windows GOARCH=amd64 go build -o flowt.exe ./cmd/aliyun-pipelines-tui

# Build for macOS
GOOS=darwin GOARCH=amd64 go build -o flowt-macos ./cmd/aliyun-pipelines-tui
```

### Optimized Production Build
```bash
# Build with optimizations and reduced binary size
go build -ldflags="-s -w" -o flowt ./cmd/aliyun-pipelines-tui
```

## Running the Application


### Direct Execution
```bash
# Run from source
go run ./cmd/aliyun-pipelines-tui

# Run compiled binary
./aliyun-pipelines-tui
```

### Development Mode
```bash
# Run with race detection
go run -race ./cmd/aliyun-pipelines-tui

# Run with verbose output
go run -v ./cmd/aliyun-pipelines-tui
```

## Dependency Management

### Installing Dependencies
```bash
# Download and install all dependencies
go mod download

# Verify dependencies
go mod verify

# Clean up unused dependencies
go mod tidy
```

### Updating Dependencies
```bash
# Update all dependencies to latest minor/patch versions
go get -u ./...

# Update specific dependency
go get -u github.com/rivo/tview

# Update to specific version
go get github.com/aliyun/alibaba-cloud-sdk-go@v1.63.107
```

## Testing

### Running Tests
```bash
# Run all tests
go test ./...

# Run tests with coverage
go test -cover ./...

# Run tests with race detection
go test -race ./...

# Verbose test output
go test -v ./...
```

### Integration Testing
```bash
# Test with real API (requires valid credentials)
export ALICLOUD_ACCESS_KEY_ID="test-key"
export ALICLOUD_ACCESS_KEY_SECRET="test-secret"
export ALICLOUD_DEVOPS_ORG_ID="test-org"
go test -tags=integration ./...
```

## Code Quality

### Formatting and Linting
```bash
# Format code
go fmt ./...

# Run go vet
go vet ./...

# Install and run golangci-lint
go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
golangci-lint run
```

### Static Analysis
```bash
# Check for potential issues
go vet ./...

# Security scanning (install gosec first)
go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
gosec ./...
```

## Distribution

### Creating Release Binaries
```bash
#!/bin/bash
# build-release.sh
VERSION=${1:-"dev"}
PLATFORMS="linux/amd64 darwin/amd64 windows/amd64"

for platform in $PLATFORMS; do
    GOOS=${platform%/*}
    GOARCH=${platform#*/}
    output="aliyun-pipelines-tui-${VERSION}-${GOOS}-${GOARCH}"
    
    if [ $GOOS = "windows" ]; then
        output+=".exe"
    fi
    
    echo "Building for $GOOS/$GOARCH..."
    GOOS=$GOOS GOARCH=$GOARCH go build -ldflags="-s -w" -o "dist/$output" ./cmd/aliyun-pipelines-tui
done
```

### Docker Deployment
```dockerfile
# Dockerfile
FROM golang:1.22-alpine AS builder
WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download
COPY . .
RUN go build -ldflags="-s -w" -o aliyun-pipelines-tui ./cmd/aliyun-pipelines-tui

FROM alpine:latest
RUN apk --no-cache add ca-certificates
WORKDIR /root/
COPY --from=builder /app/aliyun-pipelines-tui .
CMD ["./aliyun-pipelines-tui"]
```

## Troubleshooting

### Common Build Issues
- **Module not found**: Run `go mod download` and `go mod tidy`
- **Version conflicts**: Check [go.mod](mdc:go.mod) for version constraints
- **CGO errors**: Ensure CGO is properly configured for cross-compilation

### Runtime Issues
- **Authentication errors**: Verify environment variables are set correctly
- **Network issues**: Check firewall and proxy settings for Aliyun API access
- **Terminal display issues**: Ensure terminal supports Unicode and has sufficient size
